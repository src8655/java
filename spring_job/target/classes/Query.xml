<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="job">


	<!-- Member -->
	<select id="MemberExistEmail" parameterType="com.myjob.data.MemberData" resultType="int">
		select count(*) FROM MIN_JOB_MEMBER where EMAIL=#{email}
	</select>
	<insert id="MemberInsert" parameterType="com.myjob.data.MemberData">
		INSERT INTO MIN_JOB_MEMBER(EMAIL,PASSWORD,NAME,PHONE1,PHONE2,PHONE3,QUEST,ANSWER,COMPANY,COMPANY_CATE,COMPANY_NUM,ORDERS,DATES,FOLLOW,KAKAO)
		VALUES(
		#{email},
		#{password},
		#{name},
		#{phone1},
		#{phone2},
		#{phone3},
		#{quest},
		#{answer},
		#{company},
		#{company_cate},
		#{company_num},
		#{orders},
		#{dates},
		#{follow},
		#{kakao}
		)
	</insert>
	<select id="MemberLogin" parameterType="com.myjob.data.MemberData" resultType="com.myjob.data.MemberData">
		select * FROM MIN_JOB_MEMBER where EMAIL=#{email, jdbcType=VARCHAR} and password=#{password}
	</select>
	<select id="MemberExistLogin" parameterType="com.myjob.data.MemberData" resultType="int">
		select count(*) FROM MIN_JOB_MEMBER where EMAIL=#{email} and password=#{password}
	</select>
	<select id="MemberFollowUpdate" parameterType="java.util.Map">
		update MIN_JOB_MEMBER set FOLLOW=#{follow} where NO=#{no}
	</select>
	<update id="MemberUpdate" parameterType="com.myjob.data.MemberData">
		update MIN_JOB_MEMBER set
		NAME=#{name},
		PHONE1=#{phone1},
		PHONE2=#{phone2},
		PHONE3=#{phone3},
		QUEST=#{quest},
		ANSWER=#{answer},
		COMPANY=#{company},
		COMPANY_CATE=#{company_cate},
		COMPANY_NUM=#{company_num}
		<if test="password != '-1'">,PASSWORD=#{password}</if>
		where NO=#{no}
	</update>
	<select id="MemberFindEmailCount" parameterType="java.util.Map" resultType="int">
		select count(*)
		from MIN_JOB_MEMBER
		where NAME=#{name} and PHONE1=#{phone1} and PHONE2=#{phone2} and PHONE3=#{phone3}
	</select>
	<select id="MemberFindEmail" parameterType="java.util.Map" resultType="com.myjob.data.MemberData">
		select EMAIL
		from MIN_JOB_MEMBER
		where NAME=#{name} and PHONE1=#{phone1} and PHONE2=#{phone2} and PHONE3=#{phone3}
	</select>
	<select id="MemberFindPwCount" parameterType="com.myjob.data.MemberData" resultType="int">
		select count(*)
		from MIN_JOB_MEMBER
		where EMAIL=#{email} and NAME=#{name} and PHONE1=#{phone1} and PHONE2=#{phone2} and PHONE3=#{phone3} and QUEST=#{quest} and ANSWER=#{answer}
	</select>
	<update id="MemberChangePw" parameterType="com.myjob.data.MemberData">
		update MIN_JOB_MEMBER set
		PASSWORD=#{password}
		where EMAIL=#{email} and NAME=#{name} and PHONE1=#{phone1} and PHONE2=#{phone2} and PHONE3=#{phone3} and QUEST=#{quest} and ANSWER=#{answer}
	</update>
	<select id="MemberChangePwKakao" parameterType="com.myjob.data.MemberData" resultType="com.myjob.data.MemberData">
		select KAKAO
		from MIN_JOB_MEMBER
		where EMAIL=#{email} and NAME=#{name} and PHONE1=#{phone1} and PHONE2=#{phone2} and PHONE3=#{phone3} and QUEST=#{quest} and ANSWER=#{answer}
	</select>
	<delete id="MemberDeleteUser" parameterType="com.myjob.data.MemberData">
		delete from MIN_JOB_MEMBER where NO=#{no}
	</delete>
	<!--  -->
	
	
	
	
	<!-- Company -->
	<insert id="CompanyInsert" parameterType="com.myjob.data.CompanyData">
		INSERT INTO MIN_JOB_COMPANY(MEMBER_NO,URL,INFO,NAME,FOUNDING,COUNT,COMPANY_TYPE,MONEY,ADDR,FILE1,FILE2)
		VALUES(
		#{member_no},
		#{url},
		#{info},
		#{name},
		#{founding},
		#{count},
		#{company_type},
		#{money},
		#{addr},
		#{file1},
		#{file2}
		)
	</insert>
	<select id="CompanyGetArticles" parameterType="java.util.Map" resultType="com.myjob.data.CompanyData">
		<!-- select NO,MEMBER_NO,COMPANY,COMPANY_CATE,COMPANY_NUM,URL,INFO,NAME,FOUNDING,COUNT,COMPANY_TYPE,MONEY,ADDR,FILE1,FILE2
		from (select rownum as rnum,a.* from (
		select bb.NO as NO,MEMBER_NO,COMPANY,COMPANY_CATE,COMPANY_NUM,URL,INFO,bb.NAME as NAME,FOUNDING,COUNT,COMPANY_TYPE,MONEY,ADDR,FILE1,FILE2
		from MIN_JOB_MEMBER aa, MIN_JOB_COMPANY bb
		where aa.NO=bb.MEMBER_NO
		and COMPANY like '%'||#{searchValue}||'%'
		order by aa.NO desc) a) where rnum between #{start} and #{end} -->
		select NO,MEMBER_NO,COMPANY,COMPANY_CATE,COMPANY_NUM,URL,INFO,NAME,FOUNDING,COUNT,COMPANY_TYPE,MONEY,ADDR,FILE1,FILE2,COUNT_REVIEW,AVG_STARS,COUNT_INCOME,AVG_MONEY,COUNT_INTERVIEW
		from (select rownum as rnum,a.* from

		(select NO,exb1.MEMBER_NO as MEMBER_NO,COMPANY,COMPANY_CATE,COMPANY_NUM,URL,INFO,NAME,FOUNDING,COUNT,COMPANY_TYPE,MONEY,ADDR,FILE1,FILE2,NVL(COUNT_REVIEW,0) as COUNT_REVIEW,NVL(AVG_STARS,0) as AVG_STARS,NVL(COUNT_INCOME,0) as COUNT_INCOME,NVL(AVG_MONEY,0) as AVG_MONEY,NVL(COUNT_INTERVIEW,0) as COUNT_INTERVIEW
		from (select NO,exb0.MEMBER_NO as MEMBER_NO,COMPANY,COMPANY_CATE,COMPANY_NUM,URL,INFO,NAME,FOUNDING,COUNT,COMPANY_TYPE,MONEY,ADDR,FILE1,FILE2,COUNT_REVIEW,AVG_STARS,COUNT_INCOME,AVG_MONEY
		from (select NO,EXA0.MEMBER_NO as MEMBER_NO,COMPANY,COMPANY_CATE,COMPANY_NUM,URL,INFO,NAME,FOUNDING,COUNT,COMPANY_TYPE,MONEY,ADDR,FILE1,FILE2,COUNT_REVIEW,AVG_STARS
		from (select bb.NO as NO,MEMBER_NO,COMPANY,COMPANY_CATE,COMPANY_NUM,URL,INFO,bb.NAME as NAME,FOUNDING,COUNT,COMPANY_TYPE,MONEY,ADDR,FILE1,FILE2
		from (MIN_JOB_MEMBER aa), (MIN_JOB_COMPANY bb) where aa.NO=bb.MEMBER_NO
		
		and upper(company) like upper('%'||#{searchValue}||'%')
		<if test="searchType != -1">and COMPANY_CATE=${searchType}</if>
		) exa0
		
		LEFT OUTER JOIN (select MEMBER_NO, count(*) as COUNT_REVIEW, avg(STARS) as AVG_STARS from MIN_JOB_REVIEW group by MEMBER_NO) exa1 ON exa0.MEMBER_NO=exa1.MEMBER_NO) exb0
		LEFT OUTER JOIN (select MEMBER_NO, count(*) as COUNT_INCOME, avg(MONEY) as AVG_MONEY from MIN_JOB_INCOME group by MEMBER_NO) exa2 ON exb0.MEMBER_NO=exa2.MEMBER_NO) exb1
		LEFT OUTER JOIN (select MEMBER_NO, count(*) as COUNT_INTERVIEW from MIN_JOB_INTERVIEW group by MEMBER_NO) exa3 ON exb1.MEMBER_NO=exa3.MEMBER_NO
		<if test="searchSort == 1">order by AVG_STARS desc</if>
		<if test="searchSort == 2">order by AVG_MONEY desc</if>
		<if test="searchSort == 3">order by COUNT_REVIEW desc</if>
		<if test="searchSort == 4">order by COUNT_INCOME desc</if>
		<if test="searchSort == 5">order by COUNT_INTERVIEW desc</if>
		<if test="searchSort == -1">order by NO desc</if>
		) a
		) where rnum between #{start} and #{end}
	</select>
	<select id="CompanyGetCount" parameterType="java.util.Map" resultType="int">
		<!-- select count(*)
		from MIN_JOB_MEMBER aa, min_job_company bb
		where aa.NO=bb.MEMBER_NO
		and COMPANY like '%'||#{searchValue}||'%' -->
		select count(*) from

		(select NO,exb1.MEMBER_NO as MEMBER_NO,COMPANY,COMPANY_CATE,COMPANY_NUM,URL,INFO,NAME,FOUNDING,COUNT,COMPANY_TYPE,MONEY,ADDR,FILE1,FILE2,COUNT_REVIEW,AVG_STARS,COUNT_INCOME,AVG_MONEY,COUNT_INTERVIEW
		from (select NO,exb0.MEMBER_NO as MEMBER_NO,COMPANY,COMPANY_CATE,COMPANY_NUM,URL,INFO,NAME,FOUNDING,COUNT,COMPANY_TYPE,MONEY,ADDR,FILE1,FILE2,COUNT_REVIEW,AVG_STARS,COUNT_INCOME,AVG_MONEY
		from (select NO,EXA0.MEMBER_NO as MEMBER_NO,COMPANY,COMPANY_CATE,COMPANY_NUM,URL,INFO,NAME,FOUNDING,COUNT,COMPANY_TYPE,MONEY,ADDR,FILE1,FILE2,COUNT_REVIEW,AVG_STARS
		from (select bb.NO as NO,MEMBER_NO,COMPANY,COMPANY_CATE,COMPANY_NUM,URL,INFO,bb.NAME as NAME,FOUNDING,COUNT,COMPANY_TYPE,MONEY,ADDR,FILE1,FILE2
		from (MIN_JOB_MEMBER aa), (MIN_JOB_COMPANY bb) where aa.NO=bb.MEMBER_NO
		
		and upper(company) like upper('%'||#{searchValue}||'%')
		<if test="searchType != -1">and COMPANY_CATE=${searchType}</if>
		) exa0
		
		LEFT OUTER JOIN (select MEMBER_NO, count(*) as COUNT_REVIEW, avg(STARS) as AVG_STARS from MIN_JOB_REVIEW group by MEMBER_NO) exa1 ON exa0.MEMBER_NO=exa1.MEMBER_NO) exb0
		LEFT OUTER JOIN (select MEMBER_NO, count(*) as COUNT_INCOME, avg(MONEY) as AVG_MONEY from MIN_JOB_INCOME group by MEMBER_NO) exa2 ON exb0.MEMBER_NO=exa2.MEMBER_NO) exb1
		LEFT OUTER JOIN (select MEMBER_NO, count(*) as COUNT_INTERVIEW from MIN_JOB_INTERVIEW group by MEMBER_NO) exa3 ON exb1.MEMBER_NO=exa3.MEMBER_NO) a
		
	</select>
	<select id="CompanyGetArticle" parameterType="int" resultType="com.myjob.data.CompanyData">
		select vv1.NO,vv1.MEMBER_NO,vv1.COMPANY,vv1.COMPANY_CATE,vv1.COMPANY_NUM,vv1.URL,vv1.INFO,vv1.NAME,vv1.FOUNDING,vv1.COUNT,vv1.COMPANY_TYPE,vv1.MONEY,vv1.ADDR,vv1.FILE1,vv1.FILE2,NVL(vv2.AVG_STARS,0) as AVG_STARS
		from
		(select bb.NO as NO,MEMBER_NO,COMPANY,COMPANY_CATE,COMPANY_NUM,URL,INFO,bb.NAME as NAME,FOUNDING,COUNT,COMPANY_TYPE,MONEY,ADDR,FILE1,FILE2
		from MIN_JOB_MEMBER aa, MIN_JOB_COMPANY bb
		where aa.NO=bb.MEMBER_NO
		and MEMBER_NO=#{member_no}) vv1
		LEFT OUTER JOIN (select MEMBER_NO, avg(STARS) as AVG_STARS from MIN_JOB_REVIEW group by MEMBER_NO) vv2 ON vv1.MEMBER_NO=vv2.MEMBER_NO
	</select>
	<update id="CompanyUpdate" parameterType="com.myjob.data.CompanyData">
		update MIN_JOB_COMPANY set
		URL=#{url},
		INFO=#{info},
		NAME=#{name},
		FOUNDING=#{founding},
		COUNT=#{count},
		COMPANY_TYPE=#{company_type},
		MONEY=#{money},
		ADDR=#{addr},
		FILE1=#{file1},
		FILE2=#{file2}
		where MEMBER_NO=#{member_no}
	</update>
	<select id="CompanyGetFollows" parameterType="java.util.Map" resultType="com.myjob.data.CompanyData">
		select NO,MEMBER_NO,COMPANY,COMPANY_CATE,COMPANY_NUM,URL,INFO,NAME,FOUNDING,COUNT,COMPANY_TYPE,MONEY,ADDR,FILE1,FILE2,COUNT_REVIEW,AVG_STARS,COUNT_INCOME,AVG_MONEY,COUNT_INTERVIEW
		from (select rownum as rnum,a.* from
	
		(select NO,exb1.MEMBER_NO as MEMBER_NO,COMPANY,COMPANY_CATE,COMPANY_NUM,URL,INFO,NAME,FOUNDING,COUNT,COMPANY_TYPE,MONEY,ADDR,FILE1,FILE2,NVL(COUNT_REVIEW,0) as COUNT_REVIEW,NVL(AVG_STARS,0) as AVG_STARS,NVL(COUNT_INCOME,0) as COUNT_INCOME,NVL(AVG_MONEY,0) as AVG_MONEY,NVL(COUNT_INTERVIEW,0) as COUNT_INTERVIEW
		from (select NO,exb0.MEMBER_NO as MEMBER_NO,COMPANY,COMPANY_CATE,COMPANY_NUM,URL,INFO,NAME,FOUNDING,COUNT,COMPANY_TYPE,MONEY,ADDR,FILE1,FILE2,COUNT_REVIEW,AVG_STARS,COUNT_INCOME,AVG_MONEY
		from (select NO,EXA0.MEMBER_NO as MEMBER_NO,COMPANY,COMPANY_CATE,COMPANY_NUM,URL,INFO,NAME,FOUNDING,COUNT,COMPANY_TYPE,MONEY,ADDR,FILE1,FILE2,COUNT_REVIEW,AVG_STARS
		from (select bb.NO as NO,MEMBER_NO,COMPANY,COMPANY_CATE,COMPANY_NUM,URL,INFO,bb.NAME as NAME,FOUNDING,COUNT,COMPANY_TYPE,MONEY,ADDR,FILE1,FILE2
		from (MIN_JOB_MEMBER aa), (MIN_JOB_COMPANY bb) where aa.NO=bb.MEMBER_NO
		
		<if test="member_no != null">
		<if test="member_no != ''">
        and bb.MEMBER_NO in(${member_no})
        </if>
        </if>
		<if test="member_no == null">
		and bb.MEMBER_NO = -1
        </if>
		<if test="member_no == ''">
		and bb.MEMBER_NO = -1
        </if>
		) exa0
		
		LEFT OUTER JOIN (select MEMBER_NO, count(*) as COUNT_REVIEW, avg(STARS) as AVG_STARS from MIN_JOB_REVIEW group by MEMBER_NO) exa1 ON exa0.MEMBER_NO=exa1.MEMBER_NO) exb0
		LEFT OUTER JOIN (select MEMBER_NO, count(*) as COUNT_INCOME, avg(MONEY) as AVG_MONEY from MIN_JOB_INCOME group by MEMBER_NO) exa2 ON exb0.MEMBER_NO=exa2.MEMBER_NO) exb1
		LEFT OUTER JOIN (select MEMBER_NO, count(*) as COUNT_INTERVIEW from MIN_JOB_INTERVIEW group by MEMBER_NO) exa3 ON exb1.MEMBER_NO=exa3.MEMBER_NO
		
		) a
		) where rnum between #{start} and #{end}
	</select>
	<select id="CompanyGetFollowsCount" parameterType="java.util.Map" resultType="int">
		select count(*)
		from (select NO,exb0.MEMBER_NO as MEMBER_NO,COMPANY,COMPANY_CATE,COMPANY_NUM,URL,INFO,NAME,FOUNDING,COUNT,COMPANY_TYPE,MONEY,ADDR,FILE1,FILE2,COUNT_REVIEW,AVG_STARS,COUNT_INCOME,AVG_MONEY
		from (select NO,EXA0.MEMBER_NO as MEMBER_NO,COMPANY,COMPANY_CATE,COMPANY_NUM,URL,INFO,NAME,FOUNDING,COUNT,COMPANY_TYPE,MONEY,ADDR,FILE1,FILE2,COUNT_REVIEW,AVG_STARS
		from (select bb.NO as NO,MEMBER_NO,COMPANY,COMPANY_CATE,COMPANY_NUM,URL,INFO,bb.NAME as NAME,FOUNDING,COUNT,COMPANY_TYPE,MONEY,ADDR,FILE1,FILE2
		from (MIN_JOB_MEMBER aa), (MIN_JOB_COMPANY bb) where aa.NO=bb.MEMBER_NO
		
		<if test="member_no != null">
		<if test="member_no != ''">
        and bb.MEMBER_NO in(${member_no})
        </if>
        </if>
		<if test="member_no == null">
		and bb.MEMBER_NO = -1
        </if>
		<if test="member_no == ''">
		and bb.MEMBER_NO = -1
        </if>
		) exa0
		
		LEFT OUTER JOIN (select MEMBER_NO, count(*) as COUNT_REVIEW, avg(STARS) as AVG_STARS from MIN_JOB_REVIEW group by MEMBER_NO) exa1 ON exa0.MEMBER_NO=exa1.MEMBER_NO) exb0
		LEFT OUTER JOIN (select MEMBER_NO, count(*) as COUNT_INCOME, avg(MONEY) as AVG_MONEY from MIN_JOB_INCOME group by MEMBER_NO) exa2 ON exb0.MEMBER_NO=exa2.MEMBER_NO) exb1
		LEFT OUTER JOIN (select MEMBER_NO, count(*) as COUNT_INTERVIEW from MIN_JOB_INTERVIEW group by MEMBER_NO) exa3 ON exb1.MEMBER_NO=exa3.MEMBER_NO

	</select>
	<delete id="CompanyDeleteUser" parameterType="com.myjob.data.MemberData">
		delete from MIN_JOB_COMPANY where MEMBER_NO=#{no}
	</delete>
	<!--  -->
	
	
	
	
	
	
	
	
	
	<!-- Count -->
	<insert id="CountInsert" parameterType="com.myjob.data.CountData">
		insert into MIN_JOB_COUNT(DATES,MEMBER_NO)
		values(#{dates},#{member_no})
	</insert>
	<select id="CountGetCount" parameterType="com.myjob.data.CountData" resultType="int">
		select count(*) from MIN_JOB_COUNT where DATES=#{dates} and MEMBER_NO=#{member_no}
	</select>
	<!--  -->
	
	
	
	
	
	
	
	
	
	
	<!-- Review -->
	<insert id="ReviewInsert" parameterType="com.myjob.data.ReviewData">
		insert into MIN_JOB_REVIEW(TYPES,STARS,STARS1,STARS2,STARS3,STARS4,STARS5,MEMO1,MEMO2,MEMO3,MEMBER_NO,DATES,WRITER_NO,PROF,STATUS)
		values(
		#{types},
		#{stars},
		#{stars1},
		#{stars2},
		#{stars3},
		#{stars4},
		#{stars5},
		#{memo1},
		#{memo2},
		#{memo3},
		#{member_no},
		#{dates},
		#{writer_no},
		#{prof},
		#{status}
		)
	</insert>
	<select id="ReviewGetCount" parameterType="java.util.Map" resultType="int">
		select count(*) from MIN_JOB_REVIEW where MEMBER_NO=#{member_no}
	</select>
	<select id="ReviewGetArticles" parameterType="java.util.Map" resultType="com.myjob.data.ReviewData">
		select NO,TYPES,STARS,STARS1,STARS2,STARS3,STARS4,STARS5,MEMO1,MEMO2,MEMO3,MEMBER_NO,DATES,WRITER_NO,PROF,STATUS
		from (select rownum as rnum,a.* from (
		select NO,TYPES,STARS,STARS1,STARS2,STARS3,STARS4,STARS5,MEMO1,MEMO2,MEMO3,MEMBER_NO,DATES,WRITER_NO,PROF,STATUS
		from MIN_JOB_REVIEW
		where MEMBER_NO=#{member_no}
		order by NO desc) a) where rnum between #{start} and #{end}
	</select>
	<select id="ReviewGetMyCount" parameterType="java.util.Map" resultType="int">
		select count(*) from MIN_JOB_REVIEW where MEMBER_NO=#{member_no} and WRITER_NO=#{writer_no}
	</select>
	<select id="ReviewGetAllStars" parameterType="java.util.Map" resultType="com.myjob.data.ReviewData">
		select 
		sum(STARS) as STARS,
		sum(STARS1) as STARS1,
		sum(STARS2) as STARS2,
		sum(STARS3) as STARS3,
		sum(STARS4) as STARS4,
		sum(STARS5) as STARS5
		from MIN_JOB_REVIEW where MEMBER_NO=#{member_no}
	</select>
	<delete id="ReviewDeleteUser" parameterType="com.myjob.data.MemberData">
		delete from MIN_JOB_REVIEW where MEMBER_NO=#{no}
	</delete>
	<select id="ReviewGetIndexArticle" parameterType="java.util.Map" resultType="com.myjob.data.ReviewData">
		select NO,TYPES,STARS,STARS1,STARS2,STARS3,STARS4,STARS5,MEMO1,MEMO2,MEMO3,MEMBER_NO,DATES,WRITER_NO,PROF,STATUS
		from (select rownum as rnum,a.* from (
		select NO,TYPES,STARS,STARS1,STARS2,STARS3,STARS4,STARS5,MEMO1,MEMO2,MEMO3,MEMBER_NO,DATES,WRITER_NO,PROF,STATUS
		from MIN_JOB_REVIEW
		where MEMBER_NO=#{member_no}
		order by NO desc) a) where rnum between 1 and 1
	</select>
	<!--  -->
	
	
	
	<!-- Income -->
	<insert id="IncomeInsert">
		insert into MIN_JOB_INCOME(MEMBER_NO,WRITER_NO,POSITIONS,MONEY,DATES,PROF,EMPL,STATUS)
		values(
		#{member_no},
		#{writer_no},
		#{positions},
		#{money},
		#{dates},
		#{prof},
		#{empl},
		#{status}
		)
	</insert>
	<select id="IncomeGetMyCount" parameterType="java.util.Map" resultType="int">
		select count(*) from MIN_JOB_INCOME where MEMBER_NO=#{member_no} and WRITER_NO=#{writer_no}
	</select>
	<select id="IncomeGetCount" parameterType="java.util.Map" resultType="int">
		select count(*) from MIN_JOB_INCOME where MEMBER_NO=#{member_no}
	</select>
	<select id="IncomeGetArticles" parameterType="java.util.Map" resultType="com.myjob.data.IncomeData">
		select POSITIONS, avg(MONEY) as MONEY, count(*) as COUNT
		from MIN_JOB_INCOME
		where MEMBER_NO=#{member_no}
		group by POSITIONS
		order by POSITIONS asc
	</select>
	<select id="IncomeGetMoneyMaxMin" parameterType="java.util.Map" resultType="java.util.HashMap">
		select max(MONEY) as MAXS, min(MONEY) as MINS, avg(MONEY) as AVGS from
		(select POSITIONS, avg(MONEY) as MONEY, count(*) as COUNT
		from MIN_JOB_INCOME
		where MEMBER_NO=#{member_no}
		group by POSITIONS
		order by POSITIONS asc)
	</select>
	<select id="IncomeGetLank" parameterType="java.util.Map" resultType="int">
		select RNUM from
		(select rownum as RNUM, a.*
		from (select MEMBER_NO, avg(MONEY) as MONEY
				from MIN_JOB_INCOME
		        group by MEMBER_NO
		        order by MONEY desc) a) where MEMBER_NO=#{member_no}
	</select>
	<delete id="IncomeDeleteUser" parameterType="com.myjob.data.MemberData">
		delete from MIN_JOB_INCOME where MEMBER_NO=#{no}
	</delete>
	<!--  -->
	
	
	
	
	
	<!-- Interview -->
	<insert id="InterviewInsert" parameterType="com.myjob.data.InterviewData">
		insert into MIN_JOB_INTERVIEW(PROF,POSITIONS,DIFFICULTY,INTERVIEWDATE,INTERVIEWDIR,MEMO1,MEMO2,MEMO3,MEMO4,MEMO5,INTERVIEWRESULT,INTERVIEWEX,DATES,STATUS,MEMBER_NO,WRITER_NO)
		values(
		#{prof},
		#{positions},
		#{difficulty},
		#{interviewdate},
		#{interviewdir},
		#{memo1},
		#{memo2},
		#{memo3},
		#{memo4},
		#{memo5},
		#{interviewresult},
		#{interviewex},
		#{dates},
		#{status},
		#{member_no},
		#{writer_no}
		)
	</insert>
	<select id="InterviewGetCount" parameterType="java.util.Map" resultType="int">
		select count(*) from MIN_JOB_INTERVIEW where MEMBER_NO=#{member_no}
	</select>
	<select id="InterviewGetMyCount" parameterType="java.util.Map" resultType="int">
		select count(*) from MIN_JOB_INTERVIEW where MEMBER_NO=#{member_no} and WRITER_NO=${writer_no}
	</select>
	<select id="InterviewGetArticles" parameterType="java.util.Map" resultType="com.myjob.data.InterviewData">
		select NO,PROF,POSITIONS,DIFFICULTY,INTERVIEWDATE,INTERVIEWDIR,MEMO1,MEMO2,MEMO3,MEMO4,MEMO5,INTERVIEWRESULT,INTERVIEWEX,DATES,STATUS,MEMBER_NO,WRITER_NO
		from (select rownum as rnum,a.* from (
		select NO,PROF,POSITIONS,DIFFICULTY,INTERVIEWDATE,INTERVIEWDIR,MEMO1,MEMO2,MEMO3,MEMO4,MEMO5,INTERVIEWRESULT,INTERVIEWEX,DATES,STATUS,MEMBER_NO,WRITER_NO
		from MIN_JOB_INTERVIEW
		where MEMBER_NO=#{member_no}
		order by NO desc) a) where rnum between #{start} and #{end}
	</select>
	<select id="InterviewGetDifficulty" parameterType="java.util.Map" resultType="double">
		select avg(DIFFICULTY) as DIFFICULTY
		from MIN_JOB_INTERVIEW
		where MEMBER_NO=#{member_no}
	</select>
	<select id="InterviewGetInterviewdir" parameterType="java.util.Map" resultType="int">
		select count(*) as COUNT
		from MIN_JOB_INTERVIEW
		where MEMBER_NO=#{member_no}
		and INTERVIEWDIR=#{interviewdir}
	</select>
	<select id="InterviewGetInterviewex" parameterType="java.util.Map" resultType="int">
		select count(*) as COUNT
		from MIN_JOB_INTERVIEW
		where MEMBER_NO=#{member_no}
		and INTERVIEWEX=#{interviewex}
	</select>
	<select id="InterviewGetInterviewresult" parameterType="java.util.Map" resultType="int">
		select count(*) as COUNT
		from MIN_JOB_INTERVIEW
		where MEMBER_NO=#{member_no}
		and INTERVIEWRESULT=#{interviewresult}
	</select>
	<delete id="InterviewDeleteUser" parameterType="com.myjob.data.MemberData">
		delete from MIN_JOB_INTERVIEW where MEMBER_NO=#{no}
	</delete>
	
	
	
	<!-- Recruit -->
	<insert id="RecruitInsert" parameterType="com.myjob.data.RecruitData">
		insert into MIN_JOB_RECRUIT(SUBJECT,KEYWORD,MEMO1,MEMO2,MEMO3,MEMO4,MEMO5,CONTACT,PROF,EMPL,GRADE,MONEY,POSITIONS1,POSITIONS2,ENDDATES,DATES,MEMBER_NO,STATUS)
		values(
			#{subject},
			#{keyword},
			#{memo1},
			#{memo2},
			#{memo3},
			#{memo4},
			#{memo5},
			#{contact},
			#{prof},
			#{empl},
			#{grade},
			#{money},
			#{positions1},
			#{positions2},
			#{enddates},
			#{dates},
			#{member_no},
			#{status}
		)
	</insert>
	<select id="RecruitExist" parameterType="java.util.Map" resultType="int">
		select count(*)
		from MIN_JOB_RECRUIT
		where MEMBER_NO=#{member_no}
	</select>
	<select id="RecruitGetArticle" parameterType="java.util.Map" resultType="com.myjob.data.RecruitData">
		select NO,SUBJECT,KEYWORD,MEMO1,MEMO2,MEMO3,MEMO4,MEMO5,CONTACT,PROF,EMPL,GRADE,MONEY,POSITIONS1,POSITIONS2,ENDDATES,DATES,MEMBER_NO,STATUS
		from MIN_JOB_RECRUIT
		where MEMBER_NO=#{member_no}
	</select>
	<select id="RecruitGetEnddates" parameterType="java.util.Map" resultType="String">
		select ENDDATES
		from MIN_JOB_RECRUIT
		where MEMBER_NO=#{member_no}
	</select>
	<select id="RecruitGetArticleNo" parameterType="java.util.Map" resultType="com.myjob.data.RecruitData">
		select NO,SUBJECT,KEYWORD,MEMO1,MEMO2,MEMO3,MEMO4,MEMO5,CONTACT,PROF,EMPL,GRADE,MONEY,POSITIONS1,POSITIONS2,ENDDATES,DATES,MEMBER_NO,STATUS
		from MIN_JOB_RECRUIT
		where NO=#{no}
	</select>
	<update id="RecruitUpdate" parameterType="com.myjob.data.RecruitData">
		update MIN_JOB_RECRUIT set
		SUBJECT = #{subject},
		KEYWORD = #{keyword},
		MEMO1 = #{memo1},
		MEMO2 = #{memo2},
		MEMO3 = #{memo3},
		MEMO4 = #{memo4},
		MEMO5 = #{memo5},
		CONTACT = #{contact},
		PROF = #{prof},
		EMPL = #{empl},
		GRADE = #{grade},
		MONEY = #{money},
		POSITIONS1 = #{positions1},
		POSITIONS2 = #{positions2},
		ENDDATES = #{enddates},
		DATES = #{dates},
		STATUS = #{status}
		where NO=#{no}
	</update>
	<delete id="RecruitDel" parameterType="java.util.Map">
		delete from MIN_JOB_RECRUIT where NO=${no}
	</delete>
	<select id="RecruitGetArticles" parameterType="java.util.Map" resultType="com.myjob.data.RecruitData">
		select STATUS,NO,SUBJECT,KEYWORD,ENDDATES,MEMBER_NO,COMPANY,COMPANY_CATE,COUNT_REVIEW,AVG_STARS,COUNT_INCOME,AVG_MONEY,COUNT_INTERVIEW,FILE1
		from (select rownum as rnum,a.* from
		
		(select STATUS,exb1.NO,exb1.SUBJECT,exb1.KEYWORD,exb1.ENDDATES,exb1.MEMBER_NO,exb1.COMPANY,exb1.COMPANY_CATE,exb1.FILE1,NVL(exb1.COUNT_REVIEW,0) as COUNT_REVIEW,NVL(exb1.AVG_STARS,0) as AVG_STARS,NVL(exb1.COUNT_INCOME,0) as COUNT_INCOME,NVL(exb1.AVG_MONEY,0) as AVG_MONEY,NVL(exa3.COUNT_INTERVIEW,0) as COUNT_INTERVIEW
		from (select STATUS,exb0.NO,exb0.SUBJECT,exb0.KEYWORD,exb0.ENDDATES,exb0.MEMBER_NO,exb0.COMPANY,exb0.COMPANY_CATE,exb0.COUNT_REVIEW,exb0.AVG_STARS,exb0.FILE1,exa2.COUNT_INCOME,exa2.AVG_MONEY
		from (select STATUS,exa0.NO,exa0.SUBJECT,exa0.KEYWORD,exa0.ENDDATES,exa0.MEMBER_NO,exa0.COMPANY,exa0.COMPANY_CATE,exa0.FILE1,exa1.COUNT_REVIEW,exa1.AVG_STARS
		from (select STATUS,v1.NO,SUBJECT,KEYWORD,ENDDATES,v1.MEMBER_NO,v2.COMPANY,v2.COMPANY_CATE,v3.FILE1 from MIN_JOB_RECRUIT v1,MIN_JOB_MEMBER v2,MIN_JOB_COMPANY v3
		where v1.MEMBER_NO=v2.NO and v2.NO=v3.MEMBER_NO
		
		and STATUS=#{status}
		and (
			upper(SUBJECT) like upper('%'||#{searchValue}||'%')
			or upper(KEYWORD) like upper('%'||#{searchValue}||'%')
			or upper(COMPANY) like upper('%'||#{searchValue}||'%')
		)
		<if test="searchType != -1">and COMPANY_CATE=${searchType}</if>
		
		) exa0	
		LEFT OUTER JOIN (select MEMBER_NO, count(*) as COUNT_REVIEW, avg(STARS) as AVG_STARS from MIN_JOB_REVIEW group by MEMBER_NO) exa1 ON exa0.MEMBER_NO=exa1.MEMBER_NO) exb0
		LEFT OUTER JOIN (select MEMBER_NO, count(*) as COUNT_INCOME, avg(MONEY) as AVG_MONEY from MIN_JOB_INCOME group by MEMBER_NO) exa2 ON exb0.MEMBER_NO=exa2.MEMBER_NO) exb1
		LEFT OUTER JOIN (select MEMBER_NO, count(*) as COUNT_INTERVIEW from MIN_JOB_INTERVIEW group by MEMBER_NO) exa3 ON exb1.MEMBER_NO=exa3.MEMBER_NO
		
		<if test="searchSort == 1">order by AVG_STARS desc</if>
		<if test="searchSort == 2">order by AVG_MONEY desc</if>
		<if test="searchSort == 3">order by COUNT_REVIEW desc</if>
		<if test="searchSort == 4">order by COUNT_INCOME desc</if>
		<if test="searchSort == 5">order by COUNT_INTERVIEW desc</if>
		<if test="searchSort == -1">order by NO desc</if>
		
		) a
		) where rnum between #{start} and #{end}
	</select>
	<select id="RecruitGetCount" parameterType="java.util.Map" resultType="int">
		select count(*)
		from (select rownum as rnum,a.* from
		
		(select STATUS,exb1.NO,exb1.SUBJECT,exb1.KEYWORD,exb1.ENDDATES,exb1.MEMBER_NO,exb1.COMPANY,exb1.COMPANY_CATE,exb1.FILE1,NVL(exb1.COUNT_REVIEW,0) as COUNT_REVIEW,NVL(exb1.AVG_STARS,0) as AVG_STARS,NVL(exb1.COUNT_INCOME,0) as COUNT_INCOME,NVL(exb1.AVG_MONEY,0) as AVG_MONEY,NVL(exa3.COUNT_INTERVIEW,0) as COUNT_INTERVIEW
		from (select STATUS,exb0.NO,exb0.SUBJECT,exb0.KEYWORD,exb0.ENDDATES,exb0.MEMBER_NO,exb0.COMPANY,exb0.COMPANY_CATE,exb0.COUNT_REVIEW,exb0.AVG_STARS,exb0.FILE1,exa2.COUNT_INCOME,exa2.AVG_MONEY
		from (select STATUS,exa0.NO,exa0.SUBJECT,exa0.KEYWORD,exa0.ENDDATES,exa0.MEMBER_NO,exa0.COMPANY,exa0.COMPANY_CATE,exa0.FILE1,exa1.COUNT_REVIEW,exa1.AVG_STARS
		from (select STATUS,v1.NO,SUBJECT,KEYWORD,ENDDATES,v1.MEMBER_NO,v2.COMPANY,v2.COMPANY_CATE,v3.FILE1 from MIN_JOB_RECRUIT v1,MIN_JOB_MEMBER v2,MIN_JOB_COMPANY v3
		where v1.MEMBER_NO=v2.NO and v2.NO=v3.MEMBER_NO
		
		and STATUS=#{status}
		and (
			upper(SUBJECT) like upper('%'||#{searchValue}||'%')
			or upper(KEYWORD) like upper('%'||#{searchValue}||'%')
			or upper(COMPANY) like upper('%'||#{searchValue}||'%')
		)
		<if test="searchType != -1">and COMPANY_CATE=${searchType}</if>
		
		) exa0	
		LEFT OUTER JOIN (select MEMBER_NO, count(*) as COUNT_REVIEW, avg(STARS) as AVG_STARS from MIN_JOB_REVIEW group by MEMBER_NO) exa1 ON exa0.MEMBER_NO=exa1.MEMBER_NO) exb0
		LEFT OUTER JOIN (select MEMBER_NO, count(*) as COUNT_INCOME, avg(MONEY) as AVG_MONEY from MIN_JOB_INCOME group by MEMBER_NO) exa2 ON exb0.MEMBER_NO=exa2.MEMBER_NO) exb1
		LEFT OUTER JOIN (select MEMBER_NO, count(*) as COUNT_INTERVIEW from MIN_JOB_INTERVIEW group by MEMBER_NO) exa3 ON exb1.MEMBER_NO=exa3.MEMBER_NO) a)
	</select>
	<select id="RecruitGetListArticles" parameterType="java.util.Map" resultType="com.myjob.data.RecruitData">
		select NO,SUBJECT,KEYWORD,MEMO1,MEMO2,MEMO3,MEMO4,MEMO5,CONTACT,PROF,EMPL,GRADE,MONEY,POSITIONS1,POSITIONS2,ENDDATES,DATES,MEMBER_NO,STATUS
		from (select rownum as rnum,a.* from (
		select NO,SUBJECT,KEYWORD,MEMO1,MEMO2,MEMO3,MEMO4,MEMO5,CONTACT,PROF,EMPL,GRADE,MONEY,POSITIONS1,POSITIONS2,ENDDATES,DATES,MEMBER_NO,STATUS
		from MIN_JOB_RECRUIT
		where MEMBER_NO=#{member_no} and STATUS=#{status}
		order by NO desc) a) where rnum between #{start} and #{end}
	</select>
	<select id="RecruitGetListCount" parameterType="java.util.Map" resultType="int">
		select count(*) from MIN_JOB_RECRUIT where MEMBER_NO=#{member_no} and STATUS=#{status}
	</select>
	<select id="RecruitGetMyArticles" parameterType="java.util.Map" resultType="com.myjob.data.RecruitData">
		select STATUS,NO,SUBJECT,KEYWORD,ENDDATES,MEMBER_NO,COMPANY,COMPANY_CATE,COUNT_REVIEW,AVG_STARS,COUNT_INCOME,AVG_MONEY,COUNT_INTERVIEW,FILE1,FI1,FI2
		from (select rownum as rnum,a.* from
		
		(select STATUS,exb1.NO,exb1.SUBJECT,exb1.KEYWORD,exb1.ENDDATES,exb1.MEMBER_NO,exb1.COMPANY,exb1.COMPANY_CATE,exb1.FILE1,NVL(exb1.COUNT_REVIEW,0) as COUNT_REVIEW,NVL(exb1.AVG_STARS,0) as AVG_STARS,NVL(exb1.COUNT_INCOME,0) as COUNT_INCOME,NVL(exb1.AVG_MONEY,0) as AVG_MONEY,NVL(exa3.COUNT_INTERVIEW,0) as COUNT_INTERVIEW,FI1,FI2
		from (select STATUS,exb0.NO,exb0.SUBJECT,exb0.KEYWORD,exb0.ENDDATES,exb0.MEMBER_NO,exb0.COMPANY,exb0.COMPANY_CATE,exb0.COUNT_REVIEW,exb0.AVG_STARS,exb0.FILE1,exa2.COUNT_INCOME,exa2.AVG_MONEY,FI1,FI2
		from (select STATUS,exa0.NO,exa0.SUBJECT,exa0.KEYWORD,exa0.ENDDATES,exa0.MEMBER_NO,exa0.COMPANY,exa0.COMPANY_CATE,exa0.FILE1,exa1.COUNT_REVIEW,exa1.AVG_STARS,FI1,FI2
		from (select STATUS,v1.NO,SUBJECT,KEYWORD,ENDDATES,v1.MEMBER_NO,v2.COMPANY,v2.COMPANY_CATE,v3.FILE1,v4.FILE1 AS FI1,v4.FILE2 AS FI2 from MIN_JOB_RECRUIT v1,MIN_JOB_MEMBER v2,MIN_JOB_COMPANY v3,MIN_JOB_RECRUIT_LIST v4
		where v1.MEMBER_NO=v2.NO and v2.NO=v3.MEMBER_NO and v1.NO=v4.RECRUIT_NO and v4.WRITER_NO=#{writer_no}
		
		order by v4.NO desc
		) exa0	
		LEFT OUTER JOIN (select MEMBER_NO, count(*) as COUNT_REVIEW, avg(STARS) as AVG_STARS from MIN_JOB_REVIEW group by MEMBER_NO) exa1 ON exa0.MEMBER_NO=exa1.MEMBER_NO) exb0
		LEFT OUTER JOIN (select MEMBER_NO, count(*) as COUNT_INCOME, avg(MONEY) as AVG_MONEY from MIN_JOB_INCOME group by MEMBER_NO) exa2 ON exb0.MEMBER_NO=exa2.MEMBER_NO) exb1
		LEFT OUTER JOIN (select MEMBER_NO, count(*) as COUNT_INTERVIEW from MIN_JOB_INTERVIEW group by MEMBER_NO) exa3 ON exb1.MEMBER_NO=exa3.MEMBER_NO
		
		) a
		) where rnum between #{start} and #{end}
	</select>
	<select id="RecruitGetMyCount" parameterType="java.util.Map" resultType="int">
		select count(*)
		from (select STATUS,exb0.NO,exb0.SUBJECT,exb0.KEYWORD,exb0.ENDDATES,exb0.MEMBER_NO,exb0.COMPANY,exb0.COMPANY_CATE,exb0.COUNT_REVIEW,exb0.AVG_STARS,exb0.FILE1,exa2.COUNT_INCOME,exa2.AVG_MONEY,FI1,FI2
		from (select STATUS,exa0.NO,exa0.SUBJECT,exa0.KEYWORD,exa0.ENDDATES,exa0.MEMBER_NO,exa0.COMPANY,exa0.COMPANY_CATE,exa0.FILE1,exa1.COUNT_REVIEW,exa1.AVG_STARS,FI1,FI2
		from (select STATUS,v1.NO,SUBJECT,KEYWORD,ENDDATES,v1.MEMBER_NO,v2.COMPANY,v2.COMPANY_CATE,v3.FILE1,v4.FILE1 AS FI1,v4.FILE2 AS FI2 from MIN_JOB_RECRUIT v1,MIN_JOB_MEMBER v2,MIN_JOB_COMPANY v3,MIN_JOB_RECRUIT_LIST v4
		where v1.MEMBER_NO=v2.NO and v2.NO=v3.MEMBER_NO and v1.NO=v4.RECRUIT_NO and v4.WRITER_NO=#{writer_no}
		
		order by v4.NO desc
		) exa0	
		LEFT OUTER JOIN (select MEMBER_NO, count(*) as COUNT_REVIEW, avg(STARS) as AVG_STARS from MIN_JOB_REVIEW group by MEMBER_NO) exa1 ON exa0.MEMBER_NO=exa1.MEMBER_NO) exb0
		LEFT OUTER JOIN (select MEMBER_NO, count(*) as COUNT_INCOME, avg(MONEY) as AVG_MONEY from MIN_JOB_INCOME group by MEMBER_NO) exa2 ON exb0.MEMBER_NO=exa2.MEMBER_NO) exb1
		LEFT OUTER JOIN (select MEMBER_NO, count(*) as COUNT_INTERVIEW from MIN_JOB_INTERVIEW group by MEMBER_NO) exa3 ON exb1.MEMBER_NO=exa3.MEMBER_NO
	</select>
	<delete id="RecruitDeleteUser" parameterType="com.myjob.data.MemberData">
		delete from MIN_JOB_RECRUIT where MEMBER_NO=#{no}
	</delete>
	<!--  -->
	
	
	
	<!-- RecruitList -->
	<insert id="RecruitListInsert" parameterType="com.myjob.data.RecruitListData">
		insert into MIN_JOB_RECRUIT_LIST(NAME,PHONE1,PHONE2,PHONE3,EMAIL,FILE1,FILE2,MEMBER_NO,DATES,WRITER_NO,RECRUIT_NO)
		values(
		#{name},
		#{phone1},
		#{phone2},
		#{phone3},
		#{email},
		#{file1},
		#{file2},
		#{member_no},
		#{dates},
		#{writer_no},
		#{recruit_no}
		)
	</insert>
	<select id="RecruitListExistCount" parameterType="java.util.Map" resultType="int">
		select count(*)
		from MIN_JOB_RECRUIT_LIST
		where RECRUIT_NO=#{recruit_no} and WRITER_NO=#{writer_no}
	</select>
	<select id="RecruitListGetCount" parameterType="java.util.Map" resultType="int">
		select count(*)
		from MIN_JOB_RECRUIT_LIST
		where RECRUIT_NO=#{recruit_no}
	</select>
	<select id="RecruitListGetArticles" parameterType="java.util.Map" resultType="com.myjob.data.RecruitListData">
		select NO,NAME,PHONE1,PHONE2,PHONE3,EMAIL,FILE1,FILE2,MEMBER_NO,DATES,WRITER_NO,RECRUIT_NO
		from (select rownum as rnum,a.* from
		
		(select NO,NAME,PHONE1,PHONE2,PHONE3,EMAIL,FILE1,FILE2,MEMBER_NO,DATES,WRITER_NO,RECRUIT_NO
		from MIN_JOB_RECRUIT_LIST
		where RECRUIT_NO=#{recruit_no}
		
		order by NO desc) a
		) where rnum between #{start} and #{end}
	</select>
	<delete id="RecruitListDeleteUser" parameterType="com.myjob.data.MemberData">
		delete from MIN_JOB_RECRUIT_LIST where MEMBER_NO=#{no}
	</delete>
	<!--  -->
	
	
	
	<!-- 

	List
	<insert id="List_insert" parameterType="net.mytour.data.List_Data" >
		INSERT INTO MIN_TOUR_LIST(SUBJECT,CITY,DAYS,AIR,MONEY,MONEYS,MEMO1,MEMO2,CATEGORY,BUY,HIT,DATES,FILE1) VALUES(
		#{subject},
		#{city},
		#{days},
		#{air},
		#{money},
		#{moneys},
		#{memo1},
		#{memo2},
		#{category},
		#{buy},
		#{hit},
		#{dates},
		#{file1}
		)
	</insert>
	<select id="List_getArticles" parameterType="java.util.Map" resultType="net.mytour.data.List_Data">
		select NO,SUBJECT,CITY,DAYS,AIR,MONEY,MONEYS,MEMO1,MEMO2,CATEGORY,BUY,HIT,DATES,FILE1
		from (select rownum as rnum,a.* from (select * from MIN_TOUR_LIST where SUBJECT like '%'||#{searchs}||'%'
		<if test="category != -1"> and CATEGORY=#{category} </if>
	 	order by NO desc) a) where rnum between #{start} and #{end}
	</select>
	<select id="List_getCount" parameterType="java.util.Map" resultType="int">
		select count(*) from MIN_TOUR_LIST where SUBJECT like '%'||#{searchs}||'%'
	 	<if test="category != -1"> and CATEGORY=#{category} </if>
	</select>
	<select id="List_getArticle" parameterType="int" resultType="net.mytour.data.List_Data">
		select NO,SUBJECT,CITY,DAYS,AIR,MONEY,MONEYS,MEMO1,MEMO2,CATEGORY,BUY,HIT,DATES,FILE1
		from MIN_TOUR_LIST where NO=#{no}
	</select>
	<select id="List_getHit" parameterType="int" resultType="int">
		select HIT from MIN_TOUR_LIST where NO=#{no}
	</select>
	<update id="List_setHit" parameterType="java.util.Map">
		update MIN_TOUR_LIST set HIT=#{hit} where NO=#{no}
	</update> -->
	
	
	
	
	
<!-- 

 -->
</mapper>